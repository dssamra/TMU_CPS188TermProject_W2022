#include <stdio.h>

int date(int day, int tot, int *d){ 
    int i, daymonths[12]={31,28+(tot/366),31,30,31,30,31,31,30,31,30,31}; //Makes an array that has the number of days in each month
    day++;
    for (i=0;day>daymonths[i];++i){     //Checks if the day of the year is larger than the first month's number of days,
        day = day - daymonths[i];       //if it is the number of days in that month is subtracted from the days in the year
    }                                   //Repeats for the next month and the reduced number of years until the for loop is proven false
    *d=day;                             //Stores the day of the month
    return(i);                          //Returns the integer for the month (0=January, 1=February, 11=December)
}

int sort(double *Season_Avg,int *Lake){ //A function that sorts the temperatures in an array from warmest to coldest
    int i, t, j;                        //The 'Lake' array is used and changed with the temperature array so that
    double temp;                        //the name of the Lake is connected to each temperature
    for (i=0;i<6;++i){
        for(j=0;j<6;++j){
            if(*(Season_Avg+j)<*(Season_Avg+i)){
            temp = *(Season_Avg+i);
            *(Season_Avg+i) = *(Season_Avg+j);
            *(Season_Avg+j) = temp;
            t = *(Lake+i);
            *(Lake+i) = *(Lake+j);
            *(Lake+j) = t;
            }
        }
    }
}

int main(){
    FILE *file;
    char name[6][9] = {"Superior", "Michigan", "Huron", "Erie", "Ontario", "St Clair"}; //An array containing the names of the 6 lakes
    char month[12][12] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"}; //An array containing the names of the months
    double avg, sum, avg_store[6], avg_store2[6], temp;
    int i, j, x, y, z, days = 1, days2 = 1, count, temp_store[366], temp_store2[366], d;
    char newline;
    file = fopen("data_2020.txt","r");
    if(file==NULL){             /*Checks if the file opens*/
        printf("File not opened!");
        return(2);
    }
    while(newline != EOF){      /*Counts the number of days in the year*/
        newline = fgetc(file);
        if (newline=='\n'){
            days++;
        }
    }
    rewind(file);
    double matrix[days][8];
    
    for(i=0;i<days;++i){        /*Reads the file and inputs the values into a matrix*/
        for(j=0;j<8;++j){
            fscanf(file, "%lf ", &matrix[i][j]);
        }
    }
    fclose(file);
    
    printf("For the year of %.lf:\n\n", matrix[0][0]);
    /*Part 1*/
    printf("Part 1:\n\n");
    for(i=2;i<8;++i){
        sum = 0;
        for(j=0;j<days;++j){
            sum = sum + matrix[j][i];
        }
        avg = sum / days;
        avg_store[i-2]=avg;     /*Storing the averages for calculating the yearly average and Part 2*/
        printf("The average temperature of Lake %s is %.2lf°C.\n", name[i-2], avg);
    }
    sum = 0;
    for(i=0;i<6;++i){
        sum = sum + avg_store[i];
    }
    avg = sum/6;
    printf("\nThe yearly average of all lakes combined is %.2lf°C\n", avg);
    
    /*Part 2*/
    printf("\n\nPart 2:\n\n");
    temp = avg_store[0]; 
    j = 0;
    for(i=1;i<6;++i){ //Looks for the coldest average temperature
        if (avg_store[i]<temp){ //'j' is used to store the integer used in accessing the 'name' array for lake names
            temp = avg_store[i];
            j = i;
        }
    }
    printf("The coldest lake on average is Lake %s with an average temperature of %.2lf°C.\n",name[j],temp);
    
    temp = avg_store[0];
    j = 0;
    for(i=1;i<6;++i){ //Looks for the warmest average temperature
        if (avg_store[i]>temp){
            temp = avg_store[i];
            j = i;          //'j' is used to store the integer used in accessing the 'name' array for lake names
        }
    }
    printf("The warmest lake on average is Lake %s with an average temperature of %.2lf°C.\n\n",name[j],temp);
    for(i=0;i<6;++i){
        if (avg_store[i]==avg){ //'avg' was made equal to the overall average near the end of Part 1
            printf("Lake %s has an AVERAGE temperature.\n", name[i]);
        }
        else if (avg_store[i]<avg){
            printf("Lake %s has a BELOW average temperature.\n", name[i]);
        }
        else printf("Lake %s has an ABOVE average temperature.\n", name[i]); 
    }
    
    //Part 3
    printf("\n\nPart 3:\n\n");
    for(i=2;i<8;++i){ //This loop goes through each lake and looks for the warmest temperature
        x = 0;
        y = 0;
        temp = matrix[0][i];
        for(j=1;j<days;++j){ //If a new warmer day is found, temp is made equal to that
            if(matrix[j][i]>temp){
                temp = matrix[j][i];
                x = j; //The day of that temperature is stored
                y = 0; //Essentially acts like wiping the temporary storage
            }
            else if(matrix[j][i]==temp){
                temp_store[y] = j; //This function looks for days with the same temperature as temp and stores that day
                y++;               //in a temporary store that gets wiped everytime the temperature increases
            }
        }
        date(x, days, &d);
        printf("With a temperature of %.2lf°C, the warmest water temperature of Lake %s occurs on %s %d", temp, name[i-2], month[date(x, days, &d)], d); //
        for(j=0;j<y;++j){   //Checks to see if there are multiple dates with the warmest water temperature
            if (((month[date(temp_store[j], days, &d)]==month[date(x, days, &d)])&&j==0)||month[date(temp_store[j], days, &d)]==month[date(temp_store[j-1], days, &d)]){
                date(temp_store[j], days, &d);
                printf(", %d", d);} //This is printed if the month is the same
            else {
                date(temp_store[j], days, &d);
                printf(", and %s %d", month[date(temp_store[j], days, &d)], d);} //This is printed for a new month
        }
        printf(".\n");
    }
    printf("\n");
    for(i=2;i<8;++i){               //This loop goes through each lake and looks for the coldest temperature
        x = 0;
        y = 0;
        temp = matrix[0][i];
        for(j=1;j<days;++j){
            if(matrix[j][i]<temp){  //If a new warmer day is found, temp is made equal to that
                temp = matrix[j][i];
                x = j;      //The day of that temperature is stored
                y = 0;      //Essentially acts like wiping the temporary storage
            }
            else if(matrix[j][i]==temp){
                temp_store[y] = j;
                y++;    //'y' increases so that the next slot of the temporary storage can be filled
            }
        }
        date(x, days, &d);
        printf("With a temperature of %.2lf°C, the coldest water temperature of Lake %s occurs on %s %d", temp, name[i-2], month[date(x, days, &d)], d);
        for(j=0;j<y;++j){ //Checks to see if there are multiple dates with the coldest water temperature
            if (((month[date(temp_store[j], days, &d)]==month[date(x, days, &d)])&&j==0)||month[date(temp_store[j], days, &d)]==month[date(temp_store[j-1], days, &d)]){
                date(temp_store[j], days, &d);
                printf(", %d", d);} //This is printed if the month is the same
            else {
                date(temp_store[j], days, &d);
                printf(", and %s %d", month[date(temp_store[j], days, &d)], d);} //This is printed for a new month
        }
        printf(".\n");
    }
    
    //Part 4
    printf("\n\nPart 4: \n\n");
    x = 0;  //The 'x' variable is used to save the first date with the warmest temperature
    y = 0;  //The 'y' variable acts in tandem with the temporary storages
    z = 0;  //The 'z' variable is used to store the integer for the name of the lake
    temp = -237.15;
    for(i=2;i<8;++i){ //Works very similarly to the function Part 3
        for(j=0;j<days;++j){ //However, the function goes through every lake instead of finding the warmest/coldest temperature of one lake
            if(matrix[j][i]>temp){
                temp = matrix[j][i];
                x = j; //Stores the first day of the year with the warmest temperature
                y = 0; //Essentially acts like wiping the temporary storage
                z = i; //Stores the first lake with the warmest temperature
            }
            else if(matrix[j][i]==temp){
                temp_store[y] = j;  //The first temporary stores the days that also have the warmest temperature
                temp_store2[y] = i; //The second temporary storage stores the name of other lakes that also have the warmest temperature
                y++;                //'y' increases so that the next slot of the temporary storage can be filled
            }
        }
    }
    date(x, days, &d);
    printf("With a temperature of %.2lf°C, the overall warmest water temperature of all lakes occurs in Lake %s on %s %d", temp, name[z-2], month[date(x, days, &d)], d);
    for(j=0;j<y;++j){   //Checks to see if there are multiple dates with the warmest water temperature
        if (((temp_store2[j]==z)&&j==0)||temp_store2[j]==temp_store2[j-1]){ 
            if(((month[date(temp_store[j], days, &d)]==month[date(x, days, &d)])&&j==0)||month[date(temp_store[j], days, &d)]==month[date(temp_store[j-1], days, &d)]){
                date(temp_store[j], days, &d);
                printf(", %d", d);} //This prints if the lake and month remain the same
            else{
                date(temp_store[j], days, &d);
                printf(", and on %s %d", month[date(temp_store[j], days, &d)], d); //This prints if the lake remains the same
            }
        }
        else {
            date(temp_store[j], days, &d);
            printf(", and in Lake %s on %s %d", name[temp_store2[j]-2], month[date(temp_store[j], days, &d)], d); //This prints when the lake changes
        }
    }
    printf(".\n");
    
    x = 0;  //The 'x' variable is used to save the first date with the warmest temperature
    y = 0;  //The 'y' variable acts in tandem with the temporary storages
    z = 0;  //The 'z' variable is used to store the integer for the name of the lake
    temp = 1000;
    for(i=2;i<8;++i){ 
        for(j=0;j<days;++j){
            if(matrix[j][i]<temp){
                temp = matrix[j][i];
                x = j;  //Stores the first day of the year with the warmest temperature
                y = 0;  //Essentially acts like wiping the temporary storage
                z = i;  //Stores the first lake with the warmest temperature
            }
            else if(matrix[j][i]==temp){
                temp_store[y] = j;   //The first temporary stores the days that also have the warmest temperature
                temp_store2[y] = i;  //The second temporary storage stores the name of other lakes that also have the warmest temperature
                y++;                 //'y' increases so that the next slot of the temporary storage can be filled
            }
        }
    }
    date(x, days, &d);
    printf("With a temperature of %.2lf°C, the overall coldest water temperature of all lakes occurs in Lake %s on %s %d", temp, name[z-2], month[date(x, days, &d)], d);
    for(j=0;j<y;++j){   //Checks to see if there are multiple dates with the coldest water temperature
        if (((temp_store2[j]==z)&&j==0)||temp_store2[j]==temp_store2[j-1]){
            if(((month[date(temp_store[j], days, &d)]==month[date(x, days, &d)])&&j==0)||month[date(temp_store[j], days, &d)]==month[date(temp_store[j-1], days, &d)]){
                date(temp_store[j], days, &d);
                printf(", %d", d);} //This prints if the lake and month remain the same
            else{
                date(temp_store[j], days, &d);
                printf(", and on %s %d", month[date(temp_store[j], days, &d)], d);  //This prints if the lake remains the same
            }
        }
        else {
            date(temp_store[j], days, &d);
            printf(", and in Lake %s on %s %d", name[temp_store2[j]-2], month[date(temp_store[j], days, &d)], d);   //This prints when the lake changes
        }
    }
    printf(".\n");
    
    //Part 5
    printf("\n\nPart 5:\n\n");
    for(i=2;i<8;++i){ //Goes through each lake's summer season and finds the average temperature
        sum = 0;
        for(j=171;j<265;++j){ 
            sum = sum + matrix[j][i];
        }
        avg = sum / 94;
        avg_store2[i-2]=avg;
        temp_store[i-2]=i-2; //Used to connect the name of the lake with its summer temperature
    }
    sort(avg_store2, temp_store); //Calls the sort function so that the averages are sorted from warmest to coldest
    printf("The summer average for each Lake from warmest to coldest is: \n\n");
    for (i=0;i<6;++i){
        printf("Lake %s with a temperature of %.2lf°C.\n", name[temp_store[i]], avg_store2[i]);
    }
    
    //Part 6
    printf("\n\nPart 6:\n\n");
    for(i=2;i<8;++i){ //Works essentially the same as the function from Part 5 but looks at the winter season
        sum = 0;
        for(j=0;j<79;++j){ //There are two sets of days because the winter season consists of the start and end of the year
            sum = sum + matrix[j][i];
        }
        for(j=354;j<days;++j){
            sum = sum + matrix[j][i];
        }
        avg = sum / (79+(days-354));
        avg_store2[i-2]=avg;
        temp_store[i-2]=i-2;
    }
    sort(avg_store2, temp_store);
    printf("\nThe winter average for each Lake from warmest to coldest is: \n\n");
    for (i=0;i<6;++i){
        printf("Lake %s with a temperature of %.2lf°C.\n", name[temp_store[i]], avg_store2[i]);
    }
    
    //Part 7
    printf("\n\nPart 7:\n\n");
    temp = 20;
    for(i=2;i<8;++i){ //Looks through each lake and checks how many days the temperature is above 20°C
        y = 0;
        for (j=0;j<days;++j){
            if(matrix[j][i]>temp){
                y++;
            }
        }
        printf("The number of days you can swim comfortably in Lake %s is %d.\n",name[i-2],y);
    }
    
    //Part 8
    printf("\n\nPart 8:\n\n");
    temp = 0;
    for(i=2;i<8;++i){ //Same as Part 7 but checks for when the temperature is below 0°C
        y = 0;
        for (j=0;j<days;++j){
            if(matrix[j][i]<temp){
                y++;
            }
        }
        printf("The number of days Lake %s is frozen is %d.\n",name[i-2],y);
    }
    //Part 9
    printf("\n\nPart 9:\n\n");
    FILE *data2019;
    data2019 = fopen("data_2019.txt","r");
    if(data2019==NULL){             /*Checks if the file opens*/
        printf("File not opened!");
        return(2);
    }
    double LastYearMatrix[365][8];
    for(i=0;i<365;++i){        /*Reads the file and inputs the values into a matrix*/
        for(j=0;j<8;++j){
            fscanf(data2019, "%lf ", &LastYearMatrix[i][j]);
        }
    }
    fclose(data2019);
    printf("\t\t\t 2019 VS. 2020\n"); //Print out the table's title
    printf("\t\t\tYearly Averages\n");
    printf("\t\t 2019:\t\t 2020:\t\t Percent Increase \t Difference"); //Printing the table headers
    char percent = '%';
    for(i=2;i<8;++i){
        sum = 0;
        for(j=0;j<365;++j){
            sum = sum + LastYearMatrix[j][i];
        }
        avg = sum / 365;
        avg_store2[i-2]=avg;
        printf("\nLake %s\t %.2lf°C \t %.2lf°C \t %.2lf%c\t\t\t %.2lf°C", name[i-2], avg, avg_store[i-2], (((avg_store[i-2]/avg)-1)*100), percent, (avg_store[i-2]-avg));
    }
    sum = 0;
    avg = 0;
    for (i=0;i<6;++i){
        sum = sum + avg_store[i];
        avg = avg + avg_store2[i]; //Reusing 'avg' as a second sum variable
    }
    printf("\nTotal Average\t %.2lf°C\t\t %.2lf°C\t %.2lf%c \t\t %.2lf°C", (avg/6), (sum/6), (((sum/6)/(avg/6)-1)*100), percent, (sum/6)-(avg/6));
    return(0);
}